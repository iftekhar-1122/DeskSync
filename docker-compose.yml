version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dailysync-postgres
    environment:
      POSTGRES_DB: dailysync
      POSTGRES_USER: dailysync_user
      POSTGRES_PASSWORD: dailysync_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dailysync_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dailysync-network
    restart: unless-stopped

  # Redis for Queue Management
  redis:
    image: redis:7-alpine
    container_name: dailysync-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dailysync-network
    restart: unless-stopped

  # Backend API
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: dailysync-api
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://dailysync_user:dailysync_password@postgres:5432/dailysync
      - REDIS_URL=redis://redis:6379
      - API_PORT=3001
      - JWT_SECRET=${JWT_SECRET:-dev-jwt-secret}
      - WEBHOOK_API_KEY=${WEBHOOK_API_KEY:-dev-webhook-key}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dailysync-network
    volumes:
      - ./apps/api:/app
      - /app/node_modules
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web App
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: dailysync-web
    environment:
      - NODE_ENV=production
      - NEXTAUTH_URL=http://localhost:3000
      - API_BASE_URL=http://api:3001
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-dev-nextauth-secret}
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - dailysync-network
    volumes:
      - ./apps/web:/app
      - /app/node_modules
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Queue Worker
  worker:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: dailysync-worker
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://dailysync_user:dailysync_password@postgres:5432/dailysync
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-dev-jwt-secret}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dailysync-network
    volumes:
      - ./apps/api:/app
      - /app/node_modules
    command: npm run worker
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: dailysync-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
      - api
    networks:
      - dailysync-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: dailysync-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - dailysync-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: dailysync-grafana
    ports:
      - "3002:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - dailysync-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  dailysync-network:
    driver: bridge

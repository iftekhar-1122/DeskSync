// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum WebhookStatus {
  ACTIVE
  INACTIVE
  PAUSED
}

enum MeetingOutcome {
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  dailyReports   DailyReport[]
  meetingReports MeetingReport[]
  webhooks       IncomingWebhook[]

  @@map("users")
}

model IncomingWebhook {
  id        String        @id @default(cuid())
  name      String
  url       String        @unique // Generated webhook URL path
  status    WebhookStatus @default(ACTIVE)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    String

  // Relations
  user             User              @relation(fields: [userId], references: [id])
  messageTemplates MessageTemplate[]

  @@map("incoming_webhooks")
}

model MessageTemplate {
  id                String   @id @default(cuid())
  name              String
  template          String // Template string with placeholders
  variables         String[] // Array of template variables
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  incomingWebhookId String

  // Relations
  incomingWebhook IncomingWebhook @relation(fields: [incomingWebhookId], references: [id], onDelete: Cascade)

  @@map("message_templates")
}

model SupportPlatform {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("support_platforms")
}

model MeetingReport {
  id            String         @id @default(cuid())
  title         String
  startTime     DateTime
  endTime       DateTime?
  outcome       MeetingOutcome
  notes         String?
  attendees     String[] // Array of attendee names/emails
  actionItems   String[] // Array of action items
  customerName  String? // Customer name from webhook
  customerEmail String? // Customer email from webhook
  hostId        String? // Original host_id from webhook payload
  isAssigned    Boolean        @default(true) // Track if meeting is assigned to a user
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String? // Nullable for unassigned meetings

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("meeting_reports")
}

model DailyReport {
  id              String   @id @default(cuid())
  date            DateTime @db.Date
  ticketsResolved Int      @default(0)
  chatsHandled    Int      @default(0)
  githubIssues    Int      @default(0)
  emailsProcessed Int      @default(0)
  callsAttended   Int      @default(0)
  platformReports Json? // Array of platform-specific reports
  notes           String?
  links           String[] // Array of relevant links
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("daily_reports")
}
